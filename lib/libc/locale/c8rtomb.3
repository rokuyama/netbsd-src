.\"	$NetBSD: c8rtomb.3,v 1.5 2024/08/17 00:32:19 riastradh Exp $
.\"
.\" Copyright (c) 2024 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 15, 2024
.Dt C8RTOMB 3
.Os
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh NAME
.Nm c8rtomb
.Nd Restartable UTF-8 to multibyte conversion
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh LIBRARY
.Lb libc
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh SYNOPSIS
.
.In uchar.h
.
.Ft size_t
.Fo c8rtomb
.Fa "char * restrict s"
.Fa "char8_t c8"
.Fa "mbstate_t * restrict ps"
.Fc
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh DESCRIPTION
The
.Nm
function decodes UTF-8 and converts it to multibyte characters in the
current locale, keeping state so it can restart after incremental
progress.
.Pp
Each call to
.Nm
updates the conversion state
.Fa ps
with a UTF-8 code unit
.Fa c8 ,
writes up to
.Dv MB_CUR_MAX
bytes to
.Fa s
(possibly none), and returns either the number of bytes written to
.Fa s
or
.Li (size_t)-1
to denote error.
.Pp
Over successive calls to
.Nm
with the same state
.Fa ps ,
the sequence of
.Fa c8
values must be a well-formed UTF-8 code unit sequence.
If
.Fa c8 ,
when appended to the sequence of code units passed in previous calls,
does not form a well-formed UTF-8 code unit sequence, then
.Nm
returns
.Li (size_t)-1
with
.Xr errno 2
set to
.Er EILSEQ .
.Pp
If
.Fa s
is a null pointer, no output is stored, but the effects on
.Fa ps
and the return value are unchanged.
.Pp
If
.Fa ps
is a null pointer,
.Nm
uses an internal
.Vt mbstate_t
object with static storage duration, distinct from all other
.Vt mbstate_t
objects
.Po
including those used by
.Xr mbrtoc8 3 ,
.Xr mbrtoc16 3 ,
.Xr mbrtoc32 3 ,
.Xr c16rtomb 3 ,
and
.Xr c32rtomb 3
.Pc ,
which is initialized at program startup to the initial conversion
state.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh RETURN VALUES
The
.Nm
function returns the number of bytes written to
.Fa s
on success, or sets
.Xr errno 2
and returns
.Li "(size_t)-1"
on failure.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh EXAMPLES
Convert a UTF-8 code unit sequence to a multibyte string,
NUL-terminate it, and print it:
.Bd -literal -offset indent
char8_t c8[] = { 0xf0, 0x9f, 0x92, 0xa9 };
char buf[__arraycount(c8)*MB_CUR_MAX + 1], *s = buf;
size_t i;
mbstate_t mbs = {0};    /* initial conversion state */

for (i = 0; i < __arraycount(c8); i++) {
        size_t len;

        len = c8rtomb(s, c8[i], &mbs);
        if (len == (size_t)-1)
                err(1, "c8rtomb");
        assert(len < sizeof(buf) - (s - buf));
        s += len;
}
*s = '\e0';             /* NUL-terminate */
printf("%s\en", buf);
.Ed
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh ERRORS
.Bl -tag -width Bq
.It Bq Er EILSEQ
The
.Fa c8
input sequence does not encode a Unicode scalar value in UTF-8.
.It Bq Er EILSEQ
The Unicode scalar value cannot be encoded as a multibyte sequence in
the current locale.
.It Bq Er EIO
An error occurred in loading the locale's character conversions.
.El
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh SEE ALSO
.Xr c16rtomb 3 ,
.Xr c32rtomb 3 ,
.Xr mbrtoc8 3 ,
.Xr mbrtoc16 3 ,
.Xr mbrtoc32 3 ,
.Xr uchar 3
.Rs
.%B The Unicode Standard
.%O Version 15.0 \(em Core Specification
.%Q The Unicode Consortium
.%D September 2022
.%U https://www.unicode.org/versions/Unicode15.0.0/UnicodeStandard-15.0.pdf
.Re
.Rs
.%A F. Yergeau
.%T UTF-8, a transformation format of ISO 10646
.%R RFC 3629
.%D November 2003
.%I Internet Engineering Task Force
.%U https://datatracker.ietf.org/doc/html/rfc3629
.Re
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\" .Sh STANDARDS
.\" The
.\" .Nm
.\" function conforms to
.\" .St -isoC-2023 .
.\" .\" XXX PR misc/58600: man pages lack C17, C23, C++98, C++03, C++11, C++17, C++20, C++23 citation syntax
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh HISTORY
The
.Nm
function first appeared in
.Nx 11.0 .
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.Sh BUGS
It is not clear from the standard how
.Nm
is supposed to behave when given an incomplete UTF-8 code unit sequence
followed by a NUL:
.Bd -literal -offset indent
c8rtomb(s, 0xf0, ps);
c8rtomb(s, 0x9f, ps);
c8rtomb(s, 0x92, ps);
c8rtomb(s, '\e0', ps);
.Ed
.Pp
Currently this fails with
.Er EILSEQ
which matches other implementations, but this is at odds with language
in the standard which suggests that passing
.Li '\e0'
should unconditionally store a null byte and reset
.Fa ps
to the initial conversion state:
.Bd -filled -offset indent
If
.Fa c8
is a null character, a null byte is stored, preceded by any shift
sequence needed to restore the initial shift state; the resulting state
described is the initial conversion state.
.Ed
.Pp
However, it is unclear what else this should store besides a null
byte.
Should it discard the pending UTF-8 code unit sequence, or convert it
to something else and store that?
